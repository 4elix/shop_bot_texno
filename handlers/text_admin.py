import os
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from db.part_object import get_all_categories
from db.part_admin import delete_category, delete_product
from support import text_id_name_category, text_product_state
from keyboards.inline import kb_work_object, kb_category_save_or_cancel, option_object, kb_product_save_or_cancel
from utils import CUCategoryState, DeleteCategoryState, CUProductState, DeleteProductState

router_txt_admin = Router()


@router_txt_admin.message(F.text == '–†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º üõ†Ô∏è')
async def react_btn_work_object(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å', reply_markup=option_object)


@router_txt_admin.message(CUCategoryState.category_id)
async def get_category_id(message: Message, state: FSMContext):
    try:
        await state.update_data(category_id=int(message.text))
        await state.set_state(CUCategoryState.name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    except Exception as error:
        print(error)
        await state.set_state(CUCategoryState.category_id)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ Id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 3')


@router_txt_admin.message(CUCategoryState.name)
async def get_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç')

    data = await state.get_data()
    cat_id = data.get('category_id', '–ù–µ —É–∫–∞–∑–∞–Ω–Ω–æ')
    name = data['name']
    result = f'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_id}.\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {name}'
    await message.answer(result, reply_markup=kb_category_save_or_cancel)


@router_txt_admin.message(DeleteCategoryState.category_id)
async def get_category_id_for_delete(message: Message, state: FSMContext):
    await state.clear()

    try:
        status = delete_category(int(message.text))
        if status == 200:
            text = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
        else:
            text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'

        await message.answer(text, reply_markup=kb_work_object('categories', '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'))
    except Exception as error:
        print(error)
        await state.set_state(DeleteCategoryState.category_id)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ Id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 3')


@router_txt_admin.message(CUProductState.product_id)
async def get_product_id(message: Message, state: FSMContext):
    try:
        await state.update_data(product_id=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç—É')
    except Exception as error:
        print(error)
        await state.set_state(CUProductState.product_id)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ Id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 3')


@router_txt_admin.message(CUProductState.title)
async def get_product_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(CUProductState.price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞')


@router_txt_admin.message(CUProductState.price)
async def get_product_price(message: Message, state: FSMContext):
    try:
        await state.update_data(price=float(message.text))
        await state.set_state(CUProductState.quantity)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ')
    except Exception as error:
        print(error)
        await state.set_state(CUProductState.price)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: 200 –∏–ª–∏ 75.22')


@router_txt_admin.message(CUProductState.quantity)
async def get_product_quantity(message: Message, state: FSMContext):
    try:
        await state.update_data(quantity=int(message.text))
        await state.set_state(CUProductState.description)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    except Exception as error:
        print(error)
        await state.set_state(CUProductState.quantity)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 88')


@router_txt_admin.message(CUProductState.description)
async def get_product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CUProductState.image)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞')


@router_txt_admin.message(CUProductState.image)
async def get_product_image(message: Message, state: FSMContext, bot: Bot):
    try:
        folder = 'media/images/'
        if not os.path.exists(folder):
            os.makedirs(folder)

        photo = message.photo[-1]
        photo_file_id = photo.file_id
        file = await bot.get_file(photo_file_id)
        file_path = os.path.join(folder, f'{photo_file_id}.jpg')
        await bot.download_file(file.file_path, destination=file_path)
        await state.update_data(image=f'{folder}/{photo_file_id}.jpg')

        await message.answer('–í–≤–µ–¥–∏—Ç–µ Id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
        text_categories = text_id_name_category(get_all_categories())
        await message.answer(text_categories)
        await state.set_state(CUProductState.category_id)
    except Exception as error:
        print(error)
        await state.set_state(CUProductState.image)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ')


@router_txt_admin.message(CUProductState.category_id)
async def get_category_id_for_product(message: Message, state: FSMContext):
    try:
        await state.update_data(category_id=int(message.text))
        data = await state.get_data()
        text = text_product_state(data)
        await message.answer(text, reply_markup=kb_product_save_or_cancel)
    except Exception as error:
        print(error)
        await state.set_state(CUProductState.category_id)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ Id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 3')


@router_txt_admin.message(DeleteProductState.product_id)
async def get_product_id_for_delete(message: Message, state: FSMContext):
    await state.clear()

    try:
        status = delete_product(int(message.text))
        if status == 200:
            text = '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        else:
            text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'

        await message.answer(text, reply_markup=kb_work_object('products', '–ø—Ä–æ–¥—É–∫—Ç'))
    except Exception as error:
        print(error)
        await state.set_state(DeleteProductState.product_id)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ Id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 3')